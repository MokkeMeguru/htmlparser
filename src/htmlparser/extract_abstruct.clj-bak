(ns htmlparser.extract-abstruct
  (:require [hiccup.core :as h]
            [hiccup-bridge.core :as hicv]
            [clojure.data.csv :as csv]
            [taoensso.nippy :as nippy]
            [clojure.tools.cli :refer [parse-opts]]
            [clojure.java.jdbc :as sql]))

(defn open-nippy [fname]
  (nippy/thaw-from-file fname))

(defn extract-body [html]
  (loop [x html]
    (let [tag (first x)
          content (rest x)]
      (if-not (= tag :body)
        (recur (first content))
        content))))

(defn extract-p [element]
  (if (string? element)
    element
    (let [tag (first element)
          remove-tag (fn [content]
                       (let [removed-content (map extract-p content)]
                         (if (remove string? removed-content)
                           (apply str removed-content)
                           removed-content)))]
        (if (string? tag)
          element
          (condp = tag
            :p (let [content (clojure.string/replace
                              (clojure.string/replace
                               (apply str (remove nil? (flatten (map extract-p (rest element))))) #"。。" "。")
                      #" " "")]
                 (if (not= "" content)
                   [tag content]
                   nil))
            :dt (let [content (clojure.string/replace
                              (clojure.string/replace
                               (apply str (remove nil? (flatten (map extract-p (rest element))))) #"。。" "。")
                              #" " "")]
                 (if (not= "" content)
                   [tag content]
                   nil))
            :dd (let [content (clojure.string/replace
                              (clojure.string/replace
                               (apply str (remove nil? (flatten (map extract-p (rest element))))) #"。。" "。")
                              #" " "")]
                 (if (not= "" content)
                   [tag content]
                   nil))
            ;; :li (vec (cons tag (remove nil? (flatten (map extract-p (rest element))))))
            ;; :td (map extract-p (rest element)) ;; (vec (cons tag (remove nil? (flatten (map extract-p (rest element))))))
            :br "。"
            :a (second element) ;;(map extract-p (rest element))
            :span (remove-tag (rest element)) ;; (map extract-p (rest element)) ;; (second element)
            :strong (remove-tag (rest element)) ;;(map extract-p (rest element)) ;;(second element)
            :sub (remove-tag (rest element)) ;;(second element)
            :b (second element) ;;(map extract-p (rest element))
            :nobr (second element) ;;(map extract-p (rest element))
            (let [content (map extract-p (rest element))]
              (vec (cons tag content))))))))

;; (-> example-data extract-body (nth 3) extract-p)
;; (-> example-data extract-body (nth 11) extract-p)

;; (defn parse-tbody [tbody]
;;   (mapv #(-> % rest vec) (rest tbody))
;;   ;; (apply merge (map (fn [d] {(keyword (apply str (-> (rest d) first rest)))
;;   ;;                            (-> (rest d) second rest)}) (rest tbody)))
;;   )

;; (-> example-table second rest)
;; (clojure.pprint/pprint (parse-tbody (-> example-table second)))

;; (defn parse-table [table]
;;   (let [tag (first table)
;;         body (rest table)
;;         table-map
;;         {:tbody :body
;;          :thead :head
;;          :tfoot :foot}
;;         option :option]
;;     [:table
;;      (apply merge
;;             (map
;;              (fn [e]
;;                (let [k (get table-map (first e) option)
;;                      v (cond
;;                          (= k :body) (parse-tbody (rest e))
;;                          :default (vec (rest e)))]
;;                  {k v}))
;;              body))])  )


(defn format-content-element [item]
  (let [parse-list (fn [list]
                     (map
                      (fn [li]  (map (fn [e] (if (vector? e) (format-content-element e) e)) (rest li)))
                      (rest list)))]
    (cond
      (= :table (first item)) [:html item];; (parse-table item)
      (= :ul (first item)) (vec (cons :list (parse-list item)))
      (= :ol (first item)) (vec (cons :list (parse-list item)))
      :default item)))

(defn format-content [content]
  (mapv
   format-content-element
   content))

(defn gen-content [body]
  (let [
        body (vec (remove nil? body))
        content (format-content (vec (take-while #(not= :h3 (first %)) body)))
        rest (drop-while #(not= :h3 (first %)) body)
        gen-child (fn [rbody]
                    (loop [tmp (vec rbody)
                           acc []]
                      (if-not (zero? (count tmp))
                        (recur (vec (drop-while #(not= :h3 (first %)) (drop 1 (vec tmp))))
                               (cons
                                {:name (-> (take 1 tmp) first second)
                                 :meta (-> (take 1 tmp) first first)
                                 :content (format-content (vec (take-while #(not= :h3 (first %)) (drop 1 (vec tmp)))))}
                                acc))
                        (vec acc))))]
    {:content content
     :children (gen-child rest) 
     }))


;; TODO: get article's name from csv
(defn split-by-content
  "
  body-list:  [[:p \"barbar\"] [:h2 \"title1\"] [:h3 \"subtitile1\"] [:p [:span \"hogehgoe\"] [:br]] [:h2 \"title2\"] [:p \"foo\"] [:h3 \"title3\"] [:div]] \n
   article-info -> :article-name,  :id, :date
  "
  [body-list article-info]
  (loop [body (take-while #(not= (first %) :h2) body-list)
         reminder (drop-while #(not= (first %) :h2) body-list)
         tag [:meta-abstruct ""]
         acc []]
    (if (zero? (count body))
      acc
      (recur
       (take-while #(not= (first %) :h2) (rest reminder))
       (drop-while #(not= (first %) :h2) (rest reminder))
       (first reminder)
       (conj acc
             (condp = (first tag)
               :meta-abstruct
               (merge
                {;; :name (:article-name article-info)
                 :meta :meta-abstruct
                 :info article-info}
                (gen-content body))
               :h2
               (merge
                {:name (second tag)
                 :meta (first tag)}
                (gen-content body))))))))

;; (split-by-content  example-body example-info)
;; (def example-data (nth (open-nippy "./resources/rev201402-raw.npy") 3000))
;; ;; (count (open-nippy "./resources/rev201402-raw.npy"))
;; (let [info
;;       {:id (-> example-data first)
;;        :date (-> example-data (nth 2))}]
;;   (-> example-data  extract-p extract-body (split-by-content info) (clojure.pprint/pprint (clojure.java.io/writer "example-parsed.edn"))))
;;  (clojure.pprint/pprint (-> example-data extract-body))

(defn gen-db-spec [db-path]
  {:subprotocol "sqlite"
   :subname db-path})

(def article-categories {"a" "単語" "v" "動画" "i" "商品" "l" "生放送"})

(defn gen-parsed-data [npy-path id output-path db-path]
  (let [
        data (nth (open-nippy npy-path) id)
        db-spec (gen-db-spec db-path)
        info (->
              (merge
                {:updated-date (-> data (nth 2))}
                (first (sql/query db-spec ["select * from article_header where article_id = ?" (-> data first)])))
              (update :article_category #(get article-categories % "undefined")))]
    (-> data  extract-p extract-body (split-by-content info) (clojure.pprint/pprint (clojure.java.io/writer output-path)))))

 ;; (gen-parsed-data "./resources/rev201402-raw.npy" 3000 "example-parsed.edn" "/home/meguru/Documents/nico-dict/zips/head/headers.db")


;; (def db-spec
;;   {:subprotocol "sqlite"
;;    :subname "/home/meguru/Documents/nico-dict/zips/head/headers.db"})

;; (defn sample-dml [id]
;;   (sql/query db-spec
;;              ["select * from article_header where article_id = ?" id]))
;;  (sample-dml 5018045)

;; (-> example-data extract-body)



;; (example-body)
;; (split-by-content example-body)



;; (-> example-data extract-body split-by-content)
;; (-> example-data second second first (= :body))

                                        ; (extract-body (second example-data))

;; pattern
;; 1. html -> body -> div -> h2 gaiyou ...
;; 2. html -> body -> h2 gaiyou ...


;; pattern
;; 1. html -> body -> "とは" ... -> h2 gaiyou -> ... -> kanren
;;                                             -> meta-abstruct
;; 1. html -> body -> "とは" ... -> h2 kannren


;; (-> example-data second)

;; {:name ""
;;  :meta ""
;;  :content ""
;;  :children []}
